export const posts = {
  results: [
    {
      id: 1,
      title: 'Using Spark to build a recommendation engine',
      date: '13/09/2021',
      body: '<b><a href="https://github.com/aiday-mar/Spark-Recommendation-Engine"><svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg> &nbsp; GitHub: https://github.com/aiday-mar/Spark-Recommendation-Engine</a></b><br/><br/>For my course Systems for Data Science given in EPFL, we built a movie recommendation engine using Spark. We used the MovieLens 100K dataset, and tested the implementation on 25 million users. Since this is a big number of people, we used the breeze library to represent the matrices as sparse matrices CSCMatrix. We describe the algorithm used. Suppose r_{u,i} is the rating given by user u to movie i, and r_{u,.} is the average rating by the user u and r_{.,i} is the average rating for movie i. Then the scaled ratings are given by: <br/><br/><img src="https://raw.githubusercontent.com/aiday-mar/Spark-Recommendation-Engine/main/eq6.PNG" style="width:200px;margin-left:auto;margin-right:auto;"/><br/><img src="https://raw.githubusercontent.com/aiday-mar/Spark-Recommendation-Engine/main/eq7.PNG" style="width:200px;margin-left:auto;margin-right:auto;"/><br/><br/>From this we can calculate the degree of similarity between two users s_{u,v} as follows:<br/><br/><img src="https://raw.githubusercontent.com/aiday-mar/Spark-Recommendation-Engine/main/eq5.PNG" style="width:200px;margin-left:auto;margin-right:auto;"/><br/><img src="https://raw.githubusercontent.com/aiday-mar/Spark-Recommendation-Engine/main/eq4.PNG" style="width:400px;margin-left:auto;margin-right:auto;"/><br/><br/>From this we can calulate the predicted rating of user u for movie i as follows:<br/><br/><img src="https://raw.githubusercontent.com/aiday-mar/Spark-Recommendation-Engine/main/eq3.PNG" style="width:300px;margin-left:auto;margin-right:auto;"/><br/><img src="https://raw.githubusercontent.com/aiday-mar/Spark-Recommendation-Engine/main/eq2.PNG" style="width:300px;margin-left:auto;margin-right:auto;"/><br/><br/>Once the predicted ratings are calculated, it is possible to test the algorithm using the mean absolute error on the testing set.<br/><br/><img src="https://raw.githubusercontent.com/aiday-mar/Spark-Recommendation-Engine/main/MAE.PNG" style="width:400px;margin-left:auto;margin-right:auto;"/><br/>Here is a description of the written code.m The scale function is implemented as follows: <br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><p>def scale(rating: Double, ave_rating: Double): Double ={<br />&nbsp; &nbsp;if (rating &gt; ave_rating) {<br />&nbsp; &nbsp; &nbsp; return 5 - ave_rating<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;else if (rating &lt; ave_rating) {<br />&nbsp; &nbsp; &nbsp; return ave_rating - 1<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;else {<br />&nbsp; &nbsp; &nbsp; return 1<br />&nbsp; &nbsp;}<br />}</p></code><br/>The average user ratings are found (the average movie ratings are calculated similarly).<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><p>for( i &lt;- 0 until conf_users) {</p> <p>&nbsp; &nbsp;val user_specific_training_row = train(i to i, 0 to (conf_movies - 1))<br />&nbsp; &nbsp;val i_training_row_csc = CSCMatrix.tabulate(user_specific_training_row.rows, user_specific_training_row.cols)(user_specific_training_row(_,_))<br /><br />&nbsp; &nbsp;var sum = 0.0<br />&nbsp; &nbsp;var counter = 0.0</p> <p><br />&nbsp; &nbsp; for ((k,v) &lt;- i_training_row_csc.activeIterator) {<br />&nbsp; &nbsp; &nbsp; &nbsp;val row = k._1<br />&nbsp; &nbsp; &nbsp; &nbsp;val col = k._2<br />&nbsp; &nbsp; &nbsp; &nbsp;sum = sum + i_training_row_csc(row, col)<br />&nbsp; &nbsp; &nbsp; &nbsp;counter = counter + 1<br />&nbsp; &nbsp;}</p> <p>&nbsp; &nbsp;average_rating_user(i) =(sum/counter.toDouble).toDouble<br />}</p></code><br/>We compute the normalized deviations:<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><p>for ((k,v) &lt;- train.activeIterator) {<br />&nbsp; &nbsp;val row = k._1<br />&nbsp; &nbsp;val col = k._2<br /><br />&nbsp; &nbsp;train(row, col) = (train(row, col) -average_rating_user(row))/scale(train(row,col), average_rating_user(row))<br />&nbsp;&nbsp; intermediate(row, col) = train(row, col)*train(row, col)<br />}</p></code><br/><br/>The processed denominators are then:<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><p>val processed_denominators = DenseVector.zeros[Double](conf_users)<br /><br />val processed_normalized_deviations = train.copy</p> <p><br />for( i &lt;- 0 until conf_users) {<br /><br />&nbsp; &nbsp;val i_squared_normalized_deviations = intermediate(i to i, 0 to conf_movies - 1)</p> <p>&nbsp; &nbsp;var sum = 0.0<br /><br />&nbsp; &nbsp;val i_squared_normalized_deviations_csc = CSCMatrix.tabulate(i_squared_normalized_deviations.rows, i_squared_normalized_deviations.cols)(i_squared_normalized_deviations(_, _))</p> <p>&nbsp; &nbsp;<br/>for ((k,v) &lt;- i_squared_normalized_deviations_csc.activeIterator) {<br />&nbsp; &nbsp; &nbsp; val row = k._1<br />&nbsp; &nbsp; &nbsp; val col = k._2<br />&nbsp; &nbsp; &nbsp; sum = sum + i_squared_normalized_deviations_csc(row, col)<br />&nbsp; &nbsp;}</p> <p>&nbsp; &nbsp;processed_denominators(i) = sum.toDouble<br />}</p></code><br/>We compute the processed normalized deviations.<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><p>for ((k,v) &lt;- train.activeIterator) {</p> <p>&nbsp; &nbsp;val row = k._1<br />&nbsp; &nbsp;val col = k._2</p> <p>&nbsp; &nbsp;processed_normalized_deviations(row, col) = processed_normalized_deviations(row, col)/math.sqrt(processed_denominators(row))<br />}</p></code><br/><br/>Then we compute the similarities.<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><p>val broadcast_processed_normalized_deviations = sc.broadcast(processed_normalized_deviations)<br /><br />def topk(user : Int) : (Int, IndexedSeq[(Int, Double)]) = {<br /><br />&nbsp; &nbsp;val processed_normalized_deviations_broadcasted = broadcast_processed_normalized_deviations.value<br />&nbsp; &nbsp;val user_specific_processed_normalized_deviations = processed_normalized_deviations_broadcasted(user to user, 0 to (conf_movies - 1))<br />&nbsp; &nbsp;val user_specific_processed_normalized_deviations_csc = CSCMatrix.tabulate(user_specific_processed_normalized_deviations.rows, user_specific_processed_normalized_deviations.cols)(user_specific_processed_normalized_deviations(_, _))</p> <p><br />&nbsp; &nbsp;val user_specific_similarities = user_specific_processed_normalized_deviations_csc * processed_normalized_deviations.t<br /><br />&nbsp; &nbsp;user_specific_similarities(0, user) = 0<br /><br />&nbsp; &nbsp;(user, argtopk(user_specific_similarities, conf_k).map{v =&gt; (v._2, user_specific_similarities(v))})<br />}<br /><br />val topks = sc.parallelize(0 to conf_users - 1).map(u =&gt; topk(u)).collect() <br /><br />var topks_values = for {<br />&nbsp; &nbsp;user &lt;- topks<br />&nbsp; &nbsp;entry &lt;- user._2<br />} yield (user._1, entry._1, entry._2)<br /><br />val topksBuilder = new CSCMatrix.Builder[Double](rows=conf_users, cols=conf_users)<br /><br />for (entry &lt;- topks_values) { <br />&nbsp; &nbsp;topksBuilder.add(entry._1, entry._2, entry._3)<br />}<br /><br />var similaritiesTopK = topksBuilder.result()</p></code><br/><br/>The predictions are.<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><p>val predictions_builder = new CSCMatrix.Builder[Double](rows=conf.users(), cols=conf.movies())<br />val broadcast_similaritiesTopK = sc.broadcast(similaritiesTopK)<br />val broadcast_train = sc.broadcast(train) <br />val broadcast_average_rating_user = sc.broadcast(average_rating_user) <br /><br />def prediction(user : Int, item : Int) : Double = {</p> <p>&nbsp; &nbsp;val similaritiesTopK_broadcasted = broadcast_similaritiesTopK.value<br />&nbsp; &nbsp;val train_broadcasted = broadcast_train.value<br />&nbsp; &nbsp;val average_rating_user_broadcasted = broadcast_average_rating_user.value</p> <p></p> <br/><p></p> <p>&nbsp; &nbsp;var user_specific_similarities = similaritiesTopK_broadcasted(user to user, 0 to conf_users - 1)</p> <p>&nbsp; &nbsp;var user_specific_similarities_csc = CSCMatrix.tabulate(user_specific_similarities.rows, user_specific_similarities.cols)(user_specific_similarities(_, _))</p> <br/><p>&nbsp; &nbsp;val column_train = train_broadcasted(0 to conf_users - 1, item to item)</p> <p></p> <p></p> <p>&nbsp; &nbsp;var column_train_csc = CSCMatrix.tabulate(column_train.rows, column_train.cols)(column_train(_, _))</p> <p>&nbsp; &nbsp;val numerator = user_specific_similarities_csc * column_train_csc</p> <p></p> <p></p> <br/><p>&nbsp; &nbsp;for ((k,v) &lt;- user_specific_similarities_csc.activeIterator) {<br />&nbsp; &nbsp; &nbsp; &nbsp;val row = k._1<br />&nbsp; &nbsp; &nbsp; &nbsp;val col = k._2<br />&nbsp; &nbsp; &nbsp; &nbsp;user_specific_similarities_csc(row, col) = scala.math.abs(user_specific_similarities_csc(row, col))<br />&nbsp; &nbsp;}</p> <p></p> <br/><p>&nbsp; &nbsp;for ((k,v) &lt;- column_train_csc.activeIterator) {<br />&nbsp; &nbsp; &nbsp; &nbsp;val row = k._1<br />&nbsp; &nbsp; &nbsp; &nbsp;val col = k._2<br />&nbsp; &nbsp; &nbsp; &nbsp;column_train_csc(row, col) = 1<br />&nbsp; &nbsp;}</p> <p><br /><br />&nbsp; &nbsp;val denominator = user_specific_similarities_csc * column_train_csc<br />&nbsp; &nbsp;val user_specific_deviation = numerator(0,0).toDouble/denominator(0,0).toDouble</p> <p>&nbsp; &nbsp;val prediction = average_rating_user(user) + user_specific_deviation * scale(average_rating_user(user) + user_specific_deviation, average_rating_user(user))</p> <p><br /><br />&nbsp; &nbsp; prediction<br />}<br/><br/></p> <p></p> <p>val predictions_parallelize = sc.parallelize((for((k,v) &lt;- test.activeIterator) yield k).toSeq).map{case (user,item) =&gt; (user,item,prediction(user,item))}.collect()</p> <p></p> <br/><p>for (entry &lt;- predictions_parallelize) {<br />&nbsp; &nbsp; predictions_builder.add(entry._1, entry._2, entry._3)<br />}</p> <p><br />val predictions = predictions_builder.result()</p></code><br/><br/>Finally we compute the MAE.<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><p>for ((k,v) &lt;- test.activeIterator) {<br />&nbsp; &nbsp;val row = k._1<br />&nbsp; &nbsp;val col = k._2<br /><br />&nbsp; &nbsp;val toAdd = scala.math.abs(predictions(row, col) - test(row, col))<br /><br />&nbsp; &nbsp;if (!toAdd.isNaN) { <br />&nbsp; &nbsp; &nbsp; test(row, col) = toAdd<br />&nbsp; &nbsp;} else {<br />&nbsp; &nbsp; &nbsp; test(row, col) = -1<br />&nbsp; &nbsp;}<br />} <br /><br />var n_nonzero = 0.0<br />var final_sum = 0.0</p> <p>for ((k,v) &lt;- test.activeIterator) {</p> <p>&nbsp; &nbsp;val row = k._1<br />&nbsp; &nbsp;val col = k._2<br /><br />&nbsp; &nbsp;if(test(row,col) != -1) {<br />&nbsp; &nbsp; &nbsp; n_nonzero = n_nonzero + 1<br />&nbsp; &nbsp; &nbsp; final_sum = final_sum + test(row, col)<br />&nbsp; &nbsp;}<br />}</p> <p>val mae = (final_sum.toDouble/n_nonzero.toDouble).toDouble</p></code>',
      icon: 'https://logowik.com/content/uploads/images/scala3486.jpg',
    },
    {
      id: 2,
      title:
        'Optimizing the conjugate gradient algorithm using CUDA and MPI in C++',
      date: '13/09/2021',
      body: '<b><a href="https://github.com/aiday-mar/MPI-CUDA-project"> <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg> &nbsp; GitHub: https://github.com/aiday-mar/MPI-CUDA-project</a></b><br/><br/>This is a project I did for my "Parallel and High-Performance Computing" course at EPFL. The goal was to optimize the conjugate gradient algorithm using CUDA and MPI in C++. The CG algorithm solves the system: Ax = b, where A is a full, real, symmetric, positive-definite matrix. The algorithm is as follows:<br/><br/><img src="https://raw.githubusercontent.com/aiday-mar/MPI-CUDA-project/main/cg.PNG" style="width:200px;margin-left:auto;margin-right:auto;"/><br/>The code for the solve method for the parallelized MPI version is: <br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><p>void CGSolver::solve(std::vector&lt;double&gt; &amp; x) {<br /><br />&nbsp; &nbsp;int prank, psize;<br /><br />&nbsp; &nbsp;MPI_Comm_rank(MPI_COMM_WORLD, &amp;prank);<br />&nbsp; &nbsp;MPI_Comm_size(MPI_COMM_WORLD, &amp;psize);<br /><br />&nbsp; &nbsp;if(psize &gt; 1) {</p> <p>&nbsp; &nbsp; &nbsp; std::vector&lt;double&gt; r(m_m);<br />&nbsp; &nbsp; &nbsp; std::vector&lt;double&gt; smaller_r(m_m/psize);<br />&nbsp; &nbsp; &nbsp; std::vector&lt;double&gt; smaller_p(m_m/psize);<br />&nbsp; &nbsp; &nbsp; std::vector&lt;double&gt; p(m_m);<br />&nbsp; &nbsp; &nbsp; std::vector&lt;double&gt; Ap(m_m/psize);<br />&nbsp; &nbsp; &nbsp; std::vector&lt;double&gt; tmp(m_m/psize);<br />&nbsp; &nbsp; &nbsp; std::vector&lt;double&gt; smaller_x(m_m/psize);<br />&nbsp; &nbsp; &nbsp; std::vector&lt;double&gt; smaller_m_b(m_m/psize);</p> <p>&nbsp; &nbsp; &nbsp; std::fill_n(Ap.begin(), Ap.size(), 0.);<br />&nbsp; &nbsp; &nbsp; Matrix smaller_m_A(m_m/psize, m_n);<br /><br />&nbsp; &nbsp; &nbsp; for(int i = 0; i &lt; m_m/psize; i++) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(int j = 0; j &lt; m_n; j++) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;smaller_m_A(i,j) = m_A(prank*(m_m/psize) + i,j);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br />&nbsp; &nbsp; &nbsp; } <br /><br />&nbsp; &nbsp; &nbsp; for(int i=0; i &lt; m_m/psize; i++) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;smaller_x[i] = x[prank*(m_m/psize)+i]; <br />&nbsp; &nbsp; &nbsp; }</p> <p>&nbsp; &nbsp; &nbsp; for(int i=0; i &lt; m_m/psize; i++) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;smaller_m_b[i] = m_b[prank*(m_m/psize)+i];<br />&nbsp; &nbsp; &nbsp; }</p><p><br/>&nbsp; &nbsp; &nbsp; cblas_dgemv(CblasRowMajor, CblasNoTrans, m_m/psize, m_n, 1., smaller_m_A.data(), m_n, x.data(), 1, 0., Ap.data(), 1);</p> <p>&nbsp; &nbsp; &nbsp; smaller_r = smaller_m_b;</p> <p><br/>&nbsp; &nbsp; &nbsp; // Calculating r = b - A*x on smaller set of rows <br />&nbsp; &nbsp; &nbsp; cblas_daxpy(m_m/psize, -1., Ap.data(), 1, smaller_r.data(), 1); <br /><br />&nbsp; &nbsp; &nbsp; // Setting p = r on smaller set of rows <br />&nbsp; &nbsp; &nbsp; smaller_p = smaller_r;</p> <p><br/>&nbsp; &nbsp; &nbsp; // Gathering all the rows together<br />&nbsp; &nbsp; &nbsp; MPI_Allgather(&amp;smaller_r[0], m_m/psize, MPI_DOUBLE, &amp;r[0], m_m/psize, MPI_DOUBLE, MPI_COMM_WORLD);<br />&nbsp; &nbsp; &nbsp; MPI_Allgather(&amp;smaller_p[0], m_m/psize, MPI_DOUBLE, &amp;p[0], m_m/psize, MPI_DOUBLE, MPI_COMM_WORLD);</p> <p><br/>&nbsp; &nbsp; &nbsp;&nbsp;// r\' * r;<br />&nbsp; &nbsp;&nbsp; &nbsp;auto rold = cblas_ddot(m_m, r.data(), 1, r.data(), 1);</p> <p><br/>&nbsp;&nbsp; &nbsp; &nbsp;// for i = 1:length(b)<br />&nbsp; &nbsp; &nbsp;&nbsp;int k = 0;<br />&nbsp; &nbsp; &nbsp;&nbsp;for (; k &lt; m_m/psize ; ++k) {<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Ap = A * p;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::fill_n(Ap.begin(), Ap.size(), 0.);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cblas_dgemv(CblasRowMajor, CblasNoTrans, m_m/psize, m_n, 1., smaller_m_A.data(), m_n, p.data(), 1, 0., Ap.data(), 1);<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // alpha = rold / (p\' * Ap);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auto alpha = rold / std::max(cblas_ddot(m_m/psize, smaller_p.data(), 1, Ap.data(), 1), rold * NEARZERO);</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // x = x + alpha * p;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cblas_daxpy(m_m/psize, alpha, smaller_p.data(), 1, smaller_x.data(), 1);</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // r = r - alpha * Ap;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cblas_daxpy(m_m/psize, -alpha, Ap.data(), 1, smaller_r.data(), 1);<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // prank*m_n/psize<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MPI_Allgather(&amp;smaller_r[0], m_m/psize, MPI_DOUBLE, &amp;r[0], m_m/psize, MPI_DOUBLE, MPI_COMM_WORLD);<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // rnew = r\' * r;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auto rnew = cblas_ddot(m_m, r.data(), 1, r.data(), 1);<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (std::sqrt(rnew) &lt; m_tolerance) break;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auto beta = rnew / rold; <br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // p = r + (rnew / rold) * p;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tmp = smaller_r;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cblas_daxpy(m_m/psize, beta, smaller_p.data(), 1, tmp.data(), 1);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; smaller_p = tmp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MPI_Allgather(&amp;smaller_p[0], m_m/psize, MPI_DOUBLE, &amp;p[0], m_m/psize, MPI_DOUBLE, MPI_COMM_WORLD);<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // rsold = rsnew;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rold = rnew;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (DEBUG) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; "\t[STEP " &lt;&lt; k &lt;&lt; "] residual = " &lt;&lt; std::scientific<br />&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&lt;&lt; std::sqrt(rold) &lt;&lt; "\r" &lt;&lt; std::flush;<br />&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp;&nbsp;}</p> <p><br/>&nbsp; &nbsp; &nbsp; MPI_Allgather(&amp;smaller_x[0], m_m/psize, MPI_DOUBLE, &amp;x[0], m_m/psize, MPI_DOUBLE, MPI_COMM_WORLD);<br /><br />&nbsp; &nbsp; &nbsp; if (DEBUG) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::fill_n(r.begin(), r.size(), 0.);<br />&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; cblas_dgemv(CblasRowMajor, CblasNoTrans, m_m, m_n, 1., m_A.data(), m_n, x.data(), 1, 0., r.data(), 1);<br />&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; cblas_daxpy(m_n, -1., m_b.data(), 1, r.data(), 1);</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; auto res = std::sqrt(cblas_ddot(m_n, r.data(), 1, r.data(), 1)) /<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::sqrt(cblas_ddot(m_n, m_b.data(), 1, m_b.data(), 1));</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; auto nx = std::sqrt(cblas_ddot(m_n, x.data(), 1, x.data(), 1));</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; std::cout &lt;&lt; "\t[STEP " &lt;&lt; k &lt;&lt; "] residual = " &lt;&lt; std::scientific<br />&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &lt;&lt; std::sqrt(rold) &lt;&lt; ", ||x|| = " &lt;&lt; nx<br />&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &lt;&lt; ", ||Ax - b||/||b|| = " &lt;&lt; res &lt;&lt; std::endl;<br />&nbsp; &nbsp; &nbsp;&nbsp;}<br />&nbsp; &nbsp;}</p> <p><br/>&nbsp; &nbsp;if (psize == 1) {<br />&nbsp; &nbsp;std::vector&lt;double&gt; r(m_n);<br />&nbsp; &nbsp;std::vector&lt;double&gt; p(m_n);<br />&nbsp; &nbsp;std::vector&lt;double&gt; Ap(m_n);<br />&nbsp; &nbsp;std::vector&lt;double&gt; tmp(m_n);</p> <p><br/>&nbsp; &nbsp;// r = b - A * x;<br />&nbsp; &nbsp;std::fill_n(Ap.begin(), Ap.size(), 0.);<br />&nbsp; &nbsp;cblas_dgemv(CblasRowMajor, CblasNoTrans, m_m, m_n, 1., m_A.data(), m_n, x.data(), 1, 0., Ap.data(), 1);<br /><br />&nbsp; &nbsp;r = m_b;<br />&nbsp; &nbsp;cblas_daxpy(m_n, -1., Ap.data(), 1, r.data(), 1);<br /><br />&nbsp; &nbsp;// p = r;<br />&nbsp; &nbsp;p = r;<br /><br />&nbsp; &nbsp;// rsold = r\' * r;<br />&nbsp; &nbsp;auto rsold = cblas_ddot(m_n, r.data(), 1, p.data(), 1);<br /><br />&nbsp; &nbsp;// for i = 1:length(b)<br />&nbsp; &nbsp;int k = 0;<br /><br/>&nbsp; &nbsp;for (; k &lt; m_n; ++k) {</p> <p>&nbsp; &nbsp; &nbsp; // Ap = A * p;<br />&nbsp; &nbsp; &nbsp; std::fill_n(Ap.begin(), Ap.size(), 0.);<br />&nbsp; &nbsp; &nbsp; cblas_dgemv(CblasRowMajor, CblasNoTrans, m_m, m_n, 1., m_A.data(), m_n, p.data(), 1, 0., Ap.data(), 1);<br /><br />&nbsp; &nbsp; &nbsp; // alpha = rsold / (p\' * Ap);<br />&nbsp; &nbsp; &nbsp; auto alpha = rsold / std::max(cblas_ddot(m_n, p.data(), 1, Ap.data(), 1), rsold * NEARZERO);<br /><br />&nbsp; &nbsp; &nbsp; // x = x + alpha * p;<br />&nbsp; &nbsp; &nbsp; cblas_daxpy(m_n, alpha, p.data(), 1, x.data(), 1);<br />&nbsp; &nbsp; &nbsp; // r = r - alpha * Ap;<br />&nbsp; &nbsp; &nbsp; cblas_daxpy(m_n, -alpha, Ap.data(), 1, r.data(), 1);<br />&nbsp; &nbsp; &nbsp; // rsnew = r\' * r;<br />&nbsp; &nbsp; &nbsp; auto rsnew = cblas_ddot(m_n, r.data(), 1, r.data(), 1);<br /><br />&nbsp; &nbsp; &nbsp; if (std::sqrt(rsnew) &lt; m_tolerance)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break; // Convergence test<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;auto beta = rsnew / rsold;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// p = r + (rsnew / rsold) * p;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tmp = r;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cblas_daxpy(m_n, beta, p.data(), 1, tmp.data(), 1);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;p = tmp;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// rsold = rsnew; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rsold = rsnew;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (DEBUG) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::cout &lt;&lt; "\t[STEP " &lt;&lt; k &lt;&lt; "] residual = " &lt;&lt; std::scientific<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;&lt; std::sqrt(rsold) &lt;&lt; "\r" &lt;&lt; std::flush;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br />&nbsp; &nbsp; &nbsp; }</p> <p>&nbsp; &nbsp; &nbsp; if (DEBUG) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::fill_n(r.begin(), r.size(), 0.);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cblas_dgemv(CblasRowMajor, CblasNoTrans, m_m, m_n, 1., m_A.data(), m_n, x.data(), 1, 0., r.data(), 1);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cblas_daxpy(m_n, -1., m_b.data(), 1, r.data(), 1);</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;auto res = std::sqrt(cblas_ddot(m_n, r.data(), 1, r.data(), 1)) /<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::sqrt(cblas_ddot(m_n, m_b.data(), 1, m_b.data(), 1));</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;auto nx = std::sqrt(cblas_ddot(m_n, x.data(), 1, x.data(), 1));</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;std::cout &lt;&lt; "\t[STEP " &lt;&lt; k &lt;&lt; "] residual = " &lt;&lt; std::scientific<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; std::sqrt(rsold) &lt;&lt; ", ||x|| = " &lt;&lt; nx<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; ", ||Ax - b||/||b|| = " &lt;&lt; res &lt;&lt; std::endl;<br />&nbsp; &nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp; }<br />}</p></code><br/><br/>The code for the solve method designed to be run on a GPU with CUDA is:<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><p>__global__ void initialization(double *x_device, double *r_device, double *p_device, double *tmp_device, double *m_A_device, double *m_b_device, int *m_n_device) {</p> <p>&nbsp; &nbsp;// Find the blockId, we know it is between 0 and 9<br />&nbsp; &nbsp;// Each block is in charge of 1000 rows<br />&nbsp; &nbsp;int blockId = blockIdx.x;</p> <p>&nbsp; &nbsp;// Find the threadId<br />&nbsp; &nbsp;// In each block you may have a different number of threads, and this number must divide 1000<br />&nbsp; &nbsp;int threadId = threadIdx.x;</p> <p>&nbsp; &nbsp;// Number of rows each thread must consider <br />&nbsp; &nbsp;int numRowsForEachThread = (int) 1000/blockDim.x;</p> <p>&nbsp; &nbsp;// Begining row index <br />&nbsp; &nbsp;int beginningRowIndex = blockId*1000 + threadId*numRowsForEachThread;</p> <p>&nbsp; &nbsp;// Creating A*x for the specific rows<br />&nbsp; &nbsp;for(int i = beginningRowIndex; i &lt; beginningRowIndex + numRowsForEachThread; i++){</p> <p>&nbsp; &nbsp; &nbsp; int m_n_device_int = *m_n_device; <br />&nbsp; &nbsp; &nbsp; for(int j = 0; j &lt; *m_n_device; j++) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tmp_device[i] = tmp_device[i] + x_device[j]*m_A_device[i*m_n_device_int + j];<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp;} <br /> <br />&nbsp; &nbsp;for(int i = 0; i &lt; numRowsForEachThread; i++) {</p> <p>&nbsp; &nbsp; &nbsp; r_device[beginningRowIndex + i] = m_b_device[beginningRowIndex + i] - tmp_device[beginningRowIndex + i];<br />&nbsp; &nbsp;}</p> <p>&nbsp; &nbsp;// Synchronize after this kernel<br />&nbsp; &nbsp;*p_device = *r_device;<br />}</p> <p>__global__ void computeAlphaNumerator(double *r_device, double *p_device, double *Ap_device, double *m_A_device, int *m_m_device, int *m_n_device, double *numerator_alpha) {</p> <p>&nbsp; &nbsp;int blockId = blockIdx.x;<br />&nbsp; &nbsp;int threadId = threadIdx.x;<br />&nbsp; &nbsp;int numRowsForEachThread = (int) 1000/blockDim.x;<br />&nbsp; &nbsp;int beginningRowIndex = blockId*1000 + threadId*numRowsForEachThread;</p> <p>&nbsp; &nbsp;for(int j = 0; j &lt; *m_m_device; j++) {<br />&nbsp; &nbsp; &nbsp; *numerator_alpha = *numerator_alpha + r_device[j]*r_device[j];<br />&nbsp; &nbsp;}<br /> <br />&nbsp; &nbsp;for(int i = beginningRowIndex; i &lt; beginningRowIndex + numRowsForEachThread; i++){<br /> <br />&nbsp; &nbsp; &nbsp; int m_n_device_int = *m_n_device;<br /> <br />&nbsp; &nbsp; &nbsp; for(int j = 0; j &lt; m_n_device_int; j++) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Ap_device[i] = Ap_device[i] + p_device[j]*m_A_device[i*m_n_device_int + j];<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp;}</p> <p>&nbsp; &nbsp;// Synchronize after this kernel<br />}</p> <p>__global__ void computeAlphaDenominator(double *x_device, double *r_device, double *p_device,double *Ap_device, int *m_m_device, double *numerator_alpha, double *denominator_alpha) {</p> <p>&nbsp; &nbsp;int blockId = blockIdx.x;<br />&nbsp; &nbsp;int threadId = threadIdx.x;<br />&nbsp; &nbsp;int numRowsForEachThread = (int) 1000/blockDim.x;<br />&nbsp; &nbsp;int beginningRowIndex = blockId*1000 + threadId*numRowsForEachThread;</p> <p>&nbsp; &nbsp;for(int j = 0; j &lt; *m_m_device; j++) {<br />&nbsp; &nbsp; &nbsp; *denominator_alpha = *denominator_alpha + p_device[j]*Ap_device[j];<br />&nbsp; &nbsp;}<br /> <br />&nbsp; &nbsp;double alpha;</p> <p>&nbsp; &nbsp;if(*denominator_alpha != 0) {<br />&nbsp; &nbsp; &nbsp; alpha = *numerator_alpha/ *denominator_alpha;<br />&nbsp; &nbsp;} else {<br />&nbsp; &nbsp; &nbsp; alpha = 0.1;<br />&nbsp; &nbsp;}<br /> <br />&nbsp; &nbsp;for(int i = 0; i &lt; numRowsForEachThread; i++) {<br />&nbsp; &nbsp; &nbsp; x_device[beginningRowIndex + i] = x_device[beginningRowIndex + i] + alpha*p_device[beginningRowIndex + i];<br />&nbsp; &nbsp; &nbsp; r_device[beginningRowIndex + i] = r_device[beginningRowIndex + i] - alpha*Ap_device[beginningRowIndex + i];<br />&nbsp; &nbsp;}</p> <p>&nbsp; &nbsp;// Synchronize after this kernel<br />}</p> <p>__global__ void computeBeta(double *r_device, double *p_device, int *m_m_device, double *numerator_alpha, double *beta) {</p> <p>&nbsp; &nbsp;int blockId = blockIdx.x;<br />&nbsp; &nbsp;int threadId = threadIdx.x;<br />&nbsp; &nbsp;int numRowsForEachThread = (int) 1000/blockDim.x;<br />&nbsp; &nbsp;int beginningRowIndex = blockId*1000 + threadId*numRowsForEachThread;<br /> <br />&nbsp; &nbsp;for(int j = 0; j &lt; *m_m_device; j++) {<br />&nbsp; &nbsp; &nbsp; *beta = *beta + r_device[j]*r_device[j];<br />&nbsp; &nbsp;}</p> <p>&nbsp; &nbsp;*beta = *beta/ *numerator_alpha;<br /> <br />&nbsp; &nbsp;for(int i=0; i &lt; numRowsForEachThread; i++) {<br />&nbsp; &nbsp; &nbsp; p_device[beginningRowIndex + i] = r_device[beginningRowIndex + i] + (*beta)*p_device[beginningRowIndex + i];<br />&nbsp; &nbsp;}</p> <p>&nbsp; &nbsp;// Synchronize after this kernel</p> <p>}</p> <p>void CGSolver::solve(std::vector&lt;double&gt; &amp; x) {</p> <p>&nbsp; &nbsp;// CUDA parameters<br />&nbsp; &nbsp;// --- CAN BE CHANGED --- <br />&nbsp; &nbsp;int grid_size = 10;<br />&nbsp; &nbsp;int block_size = 10;</p> <p>&nbsp; &nbsp;// Arrays allocated<br />&nbsp; &nbsp;std::vector&lt;double&gt; r(m_m);<br />&nbsp; &nbsp;double *r_device;<br />&nbsp; &nbsp;std::vector&lt;double&gt; p(m_m);<br />&nbsp; &nbsp;double *p_device;<br />&nbsp; &nbsp;std::vector&lt;double&gt; Ap(m_m);<br />&nbsp; &nbsp;std::fill_n(Ap.begin(), Ap.size(), 0.); <br />&nbsp; &nbsp;double *Ap_device;<br />&nbsp; &nbsp;std::vector&lt;double&gt; tmp(m_m);<br />&nbsp; &nbsp;std::fill_n(tmp.begin(), tmp.size(), 0.); <br />&nbsp; &nbsp;double *tmp_device;</p> <p>&nbsp; &nbsp;double *x_device;</p> <p>&nbsp; &nbsp;cudaMalloc((void **) &amp;r_device, m_m*sizeof(double));<br />&nbsp; &nbsp;cudaMemcpy(r_device, &amp;r[0], m_m*sizeof(double), cudaMemcpyHostToDevice);</p> <p>&nbsp; &nbsp;cudaMalloc((void **) &amp;p_device, m_m*sizeof(double));<br />&nbsp; &nbsp;cudaMemcpy(p_device, &amp;p[0], m_m*sizeof(double), cudaMemcpyHostToDevice);</p> <p>&nbsp; &nbsp;cudaMalloc((void **) &amp;Ap_device, m_m*sizeof(double));<br />&nbsp; &nbsp;cudaMemcpy(Ap_device, &amp;Ap[0], m_m*sizeof(double), cudaMemcpyHostToDevice);</p> <p>&nbsp; &nbsp;cudaMalloc((void **) &amp;tmp_device, m_m*sizeof(double));<br />&nbsp; &nbsp;cudaMemcpy(tmp_device, &amp;tmp[0], m_m*sizeof(double), cudaMemcpyHostToDevice);</p> <p>&nbsp; &nbsp;cudaMalloc((void **) &amp;x_device, m_m*sizeof(double));<br />&nbsp; &nbsp;cudaMemcpy(x_device, &amp;x[0], m_m*sizeof(double), cudaMemcpyHostToDevice);</p> <p>&nbsp; &nbsp;double *m_A_device;<br />&nbsp; &nbsp;cudaMalloc((void **) &amp;m_A_device, m_m*m_n*sizeof(double));<br />&nbsp; &nbsp;cudaMemcpy(m_A_device, &amp;m_A.data()[0], m_m*m_n*sizeof(double), cudaMemcpyHostToDevice);</p> <p>&nbsp; &nbsp;double *m_b_device;<br />&nbsp; &nbsp;cudaMalloc((void **) &amp;m_b_device, m_m*sizeof(double));<br />&nbsp; &nbsp;cudaMemcpy(m_b_device, &amp;m_b.data()[0], m_m*sizeof(double), cudaMemcpyHostToDevice);</p> <p>&nbsp; &nbsp;// Scalars allocated<br />&nbsp; &nbsp;int *m_m_device, *m_n_device;<br />&nbsp; &nbsp;double numerator_alpha = 0.0;<br />&nbsp; &nbsp;double denominator_alpha = 0.0;<br />&nbsp; &nbsp;double beta = 0.0;<br />&nbsp; &nbsp;double *numerator_alpha_device, *denominator_alpha_device, *beta_device;<br /> <br />&nbsp; &nbsp;cudaMalloc((void **)&amp;m_m_device, sizeof(int));<br />&nbsp; &nbsp;cudaMemcpy(m_m_device, &amp;m_m, sizeof(int), cudaMemcpyHostToDevice);<br /> <br />&nbsp; &nbsp;cudaMalloc((void **)&amp;m_n_device, sizeof(int));<br />&nbsp; &nbsp;cudaMemcpy(m_n_device, &amp;m_n, sizeof(int), cudaMemcpyHostToDevice);</p> <p>&nbsp; &nbsp;cudaMalloc((void **)&amp;numerator_alpha_device, sizeof(int));<br />&nbsp; &nbsp;cudaMemcpy(numerator_alpha_device, &amp;numerator_alpha, sizeof(int), cudaMemcpyHostToDevice);</p> <p>&nbsp; &nbsp;cudaMalloc((void **)&amp;denominator_alpha_device, sizeof(int));<br />&nbsp; &nbsp;cudaMemcpy(denominator_alpha_device, &amp;denominator_alpha, sizeof(int), cudaMemcpyHostToDevice);</p> <p>&nbsp; &nbsp;cudaMalloc((void **)&amp;beta_device, sizeof(int));<br />&nbsp; &nbsp;cudaMemcpy(beta_device, &amp;beta, sizeof(int), cudaMemcpyHostToDevice);</p> <p>&nbsp; &nbsp;double m_tolerance{1e-10};<br />&nbsp; &nbsp;double stopping_criterion = 0.0;</p> <p>&nbsp; &nbsp;initialization&lt;&lt;&lt;grid_size, block_size&gt;&gt;&gt;(x_device, r_device, p_device, tmp_device, m_A_device, m_b_device, m_n_device);<br />&nbsp; &nbsp;cudaDeviceSynchronize();<br />&nbsp; &nbsp;cudaMemcpy(&amp;r[0], &amp;r_device, m_m*sizeof(double), cudaMemcpyDeviceToHost);<br /> <br />&nbsp; &nbsp;for (int i = 0; i &lt; m_m; i++) {<br />&nbsp; &nbsp; &nbsp; stopping_criterion += r[i];<br />&nbsp; &nbsp;}</p> <p>&nbsp; &nbsp;while(stopping_criterion &gt; m_tolerance) {<br />&nbsp; &nbsp; &nbsp; computeAlphaNumerator&lt;&lt;&lt;grid_size, block_size&gt;&gt;&gt;(r_device, p_device, Ap_device, m_A_device, m_m_device, m_n_device, numerator_alpha_device);<br />&nbsp; &nbsp; &nbsp; cudaDeviceSynchronize();<br />&nbsp; &nbsp; &nbsp; computeAlphaDenominator&lt;&lt;&lt;grid_size, block_size&gt;&gt;&gt;(x_device, r_device, p_device, Ap_device, m_m_device, numerator_alpha_device, denominator_alpha_device);<br />&nbsp; &nbsp; &nbsp; cudaDeviceSynchronize();<br />&nbsp; &nbsp; &nbsp; computeBeta&lt;&lt;&lt;grid_size, block_size&gt;&gt;&gt;(r_device, p_device, m_m_device, numerator_alpha_device, beta_device); <br />&nbsp; &nbsp; &nbsp; cudaDeviceSynchronize();</p> <p>&nbsp; &nbsp; &nbsp; cudaMemcpy(&amp;r[0], &amp;r_device, m_m*sizeof(double), cudaMemcpyDeviceToHost);<br />&nbsp; &nbsp; &nbsp; stopping_criterion = 0.0;</p> <p>&nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; m_m; i++) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; stopping_criterion += r[i];<br />&nbsp; &nbsp; &nbsp; } <br />&nbsp; &nbsp;}</p> <p>&nbsp; &nbsp;// When the iterations are finished, copy the final answer from the device to the host variable x<br />&nbsp; &nbsp;cudaMemcpy(&amp;x[0], &amp;x_device, m_m*sizeof(double), cudaMemcpyDeviceToHost); <br />}</p></code>',
      icon: 'https://jtes.net/wp-content/uploads/2015/05/NVIDIA_CUDA_V_2C_r.jpg',
    },
    {
      id: 3,
      title:
        'Using artificial neural networks to classify numbers using Keras and Tensorflow in Python',
      date: '13/09/2021',
      body: '<b><a href="https://colab.research.google.com/drive/1nvQR74HlDLEznBvyyxySYHBKcd9CVSjD" style="word-wrap:break-word;word-break: break-all;"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="15" height="15" viewBox="0 0 256 256" xml:space="preserve"> <desc>Created with Fabric.js 1.7.22</desc> <defs> </defs> <g transform="translate(128 128) scale(0.72 0.72)" style=""> <g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: none; fill-rule: nonzero; opacity: 1;" transform="translate(-175.05 -175.05000000000004) scale(3.89 3.89)" > <path d="M 58.506 39.939 c -2.231 0 -4.329 -0.869 -5.907 -2.447 c -3.257 -3.258 -3.257 -8.557 0 -11.815 v 0 c 3.259 -3.257 8.559 -3.255 11.814 0 c 1.578 1.577 2.448 3.675 2.448 5.907 s -0.869 4.33 -2.448 5.908 C 62.836 39.07 60.738 39.939 58.506 39.939 z M 55.428 28.507 c -1.697 1.698 -1.697 4.46 0 6.157 c 0.822 0.822 1.916 1.275 3.079 1.275 c 1.163 0 2.256 -0.453 3.079 -1.275 c 0.822 -0.822 1.276 -1.916 1.276 -3.079 c 0 -1.163 -0.453 -2.256 -1.276 -3.078 C 59.888 26.81 57.126 26.81 55.428 28.507 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" /> <path d="M 89.995 7.163 c 0.001 -0.083 0.001 -0.165 0.001 -0.248 c 0 -0.427 -0.003 -0.854 -0.012 -1.285 c -0.006 -0.267 -0.016 -0.534 -0.026 -0.802 c -0.011 -0.299 -0.02 -0.597 -0.036 -0.897 c -0.031 -0.602 -0.07 -1.207 -0.121 -1.814 c -0.081 -0.973 -0.854 -1.745 -1.827 -1.827 c -0.607 -0.051 -1.21 -0.089 -1.811 -0.121 c -0.305 -0.016 -0.607 -0.025 -0.909 -0.036 c -0.262 -0.009 -0.525 -0.02 -0.787 -0.025 c -0.437 -0.01 -0.871 -0.013 -1.304 -0.013 c -0.072 0 -0.145 0 -0.217 0.001 c -8.628 0.042 -16.548 2.16 -24.544 6.527 C 58.261 6.7 58.12 6.773 57.979 6.85 c -0.05 0.028 -0.099 0.052 -0.149 0.08 c -0.011 0.006 -0.02 0.016 -0.031 0.022 c -6.556 3.654 -13.101 8.811 -19.875 15.585 c -0.77 0.77 -1.523 1.55 -2.268 2.334 l -13.164 1.001 c -0.385 0.029 -0.753 0.169 -1.06 0.402 L 0.785 41.987 c -0.657 0.5 -0.94 1.352 -0.711 2.145 c 0.228 0.793 0.92 1.364 1.742 1.439 l 19.373 1.749 l 6.134 6.134 c -2.174 0.497 -4.389 1.715 -6.286 3.611 c -1.136 1.137 -2.048 2.411 -2.716 3.803 c -0.873 1.849 -2.79 6.61 -4.82 11.651 l -0.991 2.459 c -0.3 0.744 -0.127 1.595 0.441 2.162 c 0.382 0.383 0.894 0.586 1.415 0.586 c 0.251 0 0.505 -0.048 0.748 -0.146 l 2.547 -1.027 c 5 -2.014 9.723 -3.917 11.576 -4.79 c 1.38 -0.664 2.655 -1.576 3.79 -2.711 c 1.896 -1.896 3.113 -4.111 3.61 -6.285 l 5.952 5.952 l 1.749 19.372 c 0.074 0.822 0.646 1.514 1.439 1.742 c 0.183 0.053 0.369 0.078 0.553 0.078 c 0.614 0 1.207 -0.283 1.592 -0.789 l 15.711 -20.646 c 0.233 -0.307 0.373 -0.675 0.402 -1.06 l 0.971 -12.775 c 0.857 -0.811 1.707 -1.635 2.547 -2.475 c 6.779 -6.779 11.939 -13.327 15.594 -19.887 c 0.004 -0.007 0.01 -0.013 0.014 -0.02 c 0.018 -0.032 0.033 -0.063 0.051 -0.095 c 0.167 -0.301 0.326 -0.602 0.486 -0.904 C 87.906 23.416 89.95 15.628 89.995 7.163 z M 85.931 4.161 c 0.442 8.455 -1.171 16.115 -5.014 23.796 L 62.136 9.176 C 69.815 5.332 77.471 3.718 85.931 4.161 z M 23.384 29.817 l 8.371 -0.636 c -1.415 1.633 -2.771 3.282 -4.06 4.942 c -0.007 0.009 -0.016 0.015 -0.023 0.024 c -0.107 0.138 -0.206 0.276 -0.312 0.414 c -0.541 0.704 -1.075 1.408 -1.591 2.114 c -0.144 0.196 -0.278 0.391 -0.42 0.587 c -0.488 0.678 -0.973 1.355 -1.437 2.033 c -0.236 0.344 -0.455 0.685 -0.683 1.027 c -0.353 0.53 -0.712 1.059 -1.049 1.588 c -0.3 0.47 -0.578 0.935 -0.864 1.403 L 7.308 42.05 L 23.384 29.817 z M 51.111 61.049 c -0.687 0.503 -1.371 0.991 -2.054 1.465 c -0.411 0.285 -0.822 0.569 -1.233 0.845 c -0.293 0.197 -0.585 0.391 -0.877 0.582 c -0.709 0.464 -1.417 0.922 -2.124 1.356 L 34.811 55.284 c -0.001 -0.001 -0.001 -0.001 -0.002 -0.002 s -0.001 -0.001 -0.002 -0.002 L 24.795 45.268 c 0.025 -0.04 0.052 -0.081 0.077 -0.122 c 0.407 -0.659 0.832 -1.319 1.265 -1.98 c 0.201 -0.306 0.405 -0.613 0.612 -0.921 c 0.263 -0.392 0.535 -0.785 0.807 -1.177 c 0.486 -0.7 0.986 -1.401 1.501 -2.105 c 0.135 -0.184 0.268 -0.369 0.405 -0.553 l 22.22 22.221 C 51.492 60.772 51.301 60.909 51.111 61.049 z M 30.199 66.225 c -0.816 0.816 -1.722 1.466 -2.683 1.927 c -1.512 0.714 -5.425 2.304 -9.539 3.962 c 1.66 -4.119 3.247 -8.024 3.955 -9.526 c 0.468 -0.973 1.119 -1.879 1.935 -2.696 c 1.728 -1.729 3.886 -2.682 5.661 -2.682 c 0.978 0 1.84 0.29 2.449 0.897 l 0.006 0.006 C 33.695 59.832 32.879 63.545 30.199 66.225 z M 60.092 66.525 L 47.858 82.6 L 46.62 68.873 c 0.521 -0.318 1.041 -0.629 1.566 -0.965 c 0.498 -0.318 0.997 -0.656 1.495 -0.988 c 0.375 -0.25 0.748 -0.49 1.124 -0.748 c 0.652 -0.446 1.303 -0.913 1.955 -1.382 c 0.223 -0.161 0.446 -0.315 0.67 -0.479 c 0.685 -0.5 1.367 -1.019 2.05 -1.542 c 0.155 -0.119 0.31 -0.23 0.465 -0.35 c 0.01 -0.008 0.017 -0.018 0.027 -0.026 c 1.588 -1.232 3.165 -2.527 4.729 -3.875 L 60.092 66.525 z M 64.725 49.339 c -3.181 3.181 -6.49 6.147 -9.844 8.834 L 31.919 35.21 c 2.687 -3.354 5.653 -6.663 8.834 -9.844 c 6.432 -6.432 12.306 -10.995 17.707 -14.209 l 20.474 20.474 C 75.721 37.033 71.158 42.907 64.725 49.339 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" /> </g> </g> </svg> &nbsp; Link link: https://colab.research.google.com/drive/1nvQR74HlDLEznBvyyxySYHBKcd9CVSjD</a></b><br/><b><a href="https://github.com/aiday-mar/Keras-Image-Classification"> <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg> &nbsp; GitHub: https://github.com/aiday-mar/Keras-Image-Classification</a></b><br/><br/>During my masters degree, I have taken the course Artificial Neural Networks. The project of the course was to classify first the MNIST dataset of numbers, then the fashion-MNIST dataset, using (convolutional) neural networks. To this end, we use the Keras and Tensorflow libraries of Python. We changed the various parameters of the neural networks to find out which set of parameters gave us the lowest testing error. The parameters studied were: number of hidden layers, type of optimizer (SGD or Adam), size of the learning rate, number of hidden neurons per layer, type of regularization, size of the regularization constant. Below is the code for the final convolutional neural networks used in the last question of the notebook. First we load the data and reshape it: <br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><span>(x_fashion_train_conv,&nbsp;y_fashion_train_conv),&nbsp;(x_fashion_test_conv,&nbsp;y_fashion_test_conv)&nbsp;=&nbsp;keras.datasets.fashion_mnist.load_data()</span></div><div><span></span></div><div><span>x_fashion_train_conv&nbsp;=&nbsp;np.expand_dims(x_fashion_train_conv,&nbsp;</span><span>-1</span><span>)</span></div><div><span>x_fashion_test_conv&nbsp;=&nbsp;np.expand_dims(x_fashion_test_conv,&nbsp;</span><span>-1</span><span>)</span></div><div><span></span></div><div><span>y_fashion_train_conv&nbsp;=&nbsp;y_fashion_train</span><span>y_fashion_test_conv&nbsp;=&nbsp;y_fashion_test</span></div></code><br/><br/>Then we provide the method to build the network <br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"> <div><span>def</span><span>&nbsp;</span><span>build_convolutional_network</span><span>(</span><span>number_of_hidden_layers</span><span>&nbsp;=&nbsp;</span><span>0</span><span>,&nbsp;</span><span>units</span><span>&nbsp;=&nbsp;</span><span>100</span><span>,&nbsp;</span><span>optimizer</span><span>=</span><span>"sgd"</span><span>,&nbsp;</span><span>lr</span><span>&nbsp;=&nbsp;</span><span>0.01</span><span>,&nbsp;</span><span>momentum</span><span>&nbsp;=&nbsp;</span><span>0.9</span><span>,&nbsp;</span><span>dropOut</span><span>&nbsp;=&nbsp;</span><span>None</span><span>,&nbsp;</span><span>regularization_kernel</span><span>&nbsp;=&nbsp;</span><span>0</span><span>,&nbsp;</span><span>regularization_bias</span><span>&nbsp;=&nbsp;</span><span>0</span><span>,&nbsp;</span><span>batchNormalization</span><span>&nbsp;=&nbsp;</span><span>False</span><span>)&nbsp;:</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;model&nbsp;=&nbsp;Sequential()</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;model.add(Conv2D(units,&nbsp;(</span><span>3</span><span>,&nbsp;</span><span>3</span><span>),&nbsp;activation=</span><span>"relu"</span><span>,&nbsp;input_shape=(</span><span>28</span><span>,&nbsp;</span><span>28</span><span>,&nbsp;</span><span>1</span><span>),&nbsp;kernel_regularizer=regularizers.l2(regularization_kernel),&nbsp;bias_regularizer=regularizers.l2(regularization_bias)))</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;model.add(MaxPooling2D((</span><span>2</span><span>,&nbsp;</span><span>2</span><span>)))</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>(dropOut&nbsp;!=&nbsp;</span><span>None</span><span>):</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.add(Dropout(dropOut))</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>(batchNormalization&nbsp;==&nbsp;</span><span>True</span><span>):</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.add(BatchNormalization())</span></div> <br /> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>(number_of_hidden_layers&nbsp;&gt;&nbsp;</span><span>0</span><span>)&nbsp;:</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span>&nbsp;i&nbsp;</span><span>in</span><span>&nbsp;</span><span>range</span><span>(number_of_hidden_layers):</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.add(Conv2D(units,&nbsp;(</span><span>3</span><span>,&nbsp;</span><span>3</span><span>),&nbsp;activation=</span><span>"relu"</span><span>,&nbsp;input_shape=(</span><span>28</span><span>,&nbsp;</span><span>28</span><span>,&nbsp;</span><span>1</span><span>),&nbsp;kernel_regularizer=regularizers.l2(regularization_kernel),&nbsp;bias_regularizer=regularizers.l2(regularization_bias)))</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.add(MaxPooling2D((</span><span>2</span><span>,&nbsp;</span><span>2</span><span>)))</span></div> <br /> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>(dropOut&nbsp;!=&nbsp;</span><span>None</span><span>):</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.add(Dropout(dropOut))</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>(batchNormalization&nbsp;==&nbsp;</span><span>True</span><span>):</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.add(BatchNormalization())</span></div> <br /> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;model.add(Flatten())</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;model.add(Dense(</span><span>10</span><span>,&nbsp;activation=</span><span>"softmax"</span><span>))</span></div> <br /> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;opt&nbsp;=&nbsp;keras.optimizers.SGD(lr=lr,&nbsp;momentum=momentum)</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>(optimizer&nbsp;==&nbsp;</span><span>"adam"</span><span>):</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opt&nbsp;=&nbsp;keras.optimizers.Adam(learning_rate&nbsp;=&nbsp;lr)</span></div> <br /> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;model.</span><span>compile</span><span>(loss=</span><span>"categorical_crossentropy"</span><span>,&nbsp;metrics=[</span><span>"accuracy"</span><span>],&nbsp;optimizer=opt)</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span>&nbsp;model</span></div> </code><br/><br/>Then we build three different neural networks and we compare them<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><br /> <div><span>model_batch&nbsp;=&nbsp;build_convolutional_network(number_of_hidden_layers&nbsp;=&nbsp;</span><span>1</span><span>,&nbsp;units&nbsp;=&nbsp;</span><span>100</span><span>,&nbsp;optimizer=</span><span>"adam"</span><span>,&nbsp;lr&nbsp;=&nbsp;</span><span>0.01</span><span>,&nbsp;batchNormalization=</span><span>True</span><span>)</span></div> <div><span>history_batch&nbsp;=&nbsp;model_batch.fit(x_fashion_train_conv,&nbsp;y_fashion_train_conv,&nbsp;batch_size=</span><span>128</span><span>,&nbsp;epochs=</span><span>20</span><span>,&nbsp;verbose=</span><span>0</span><span>,&nbsp;validation_data=(x_fashion_test_conv,&nbsp;y_fashion_test_conv))</span></div> <div><span>print</span><span>(</span><span>"Best&nbsp;validation&nbsp;accuracy&nbsp;for&nbsp;a&nbsp;convolutional&nbsp;neural&nbsp;network&nbsp;with&nbsp;batch&nbsp;normalization:&nbsp;"</span><span>&nbsp;+&nbsp;</span><span>str</span><span>(</span><span>max</span><span>(history_batch.history[</span><span>"val_accuracy"</span><span>])))</span></div> <br /> <div><span>model_drop&nbsp;=&nbsp;build_convolutional_network(number_of_hidden_layers&nbsp;=&nbsp;</span><span>1</span><span>,&nbsp;units&nbsp;=&nbsp;</span><span>100</span><span>,&nbsp;optimizer=</span><span>"adam"</span><span>,&nbsp;lr&nbsp;=&nbsp;</span><span>0.01</span><span>,&nbsp;dropOut=</span><span>0.1</span><span>)</span></div> <div><span>history_drop&nbsp;=&nbsp;model_drop.fit(x_fashion_train_conv,&nbsp;y_fashion_train_conv,&nbsp;batch_size=</span><span>128</span><span>,&nbsp;epochs=</span><span>20</span><span>,&nbsp;verbose=</span><span>0</span><span>,&nbsp;validation_data=(x_fashion_test_conv,&nbsp;y_fashion_test_conv))</span></div> <div><span>print</span><span>(</span><span>"Best&nbsp;validation&nbsp;accuracy&nbsp;for&nbsp;a&nbsp;convolutional&nbsp;neural&nbsp;network&nbsp;with&nbsp;dropout&nbsp;of&nbsp;0.1&nbsp;:&nbsp;"</span><span>&nbsp;+&nbsp;</span><span>str</span><span>(</span><span>max</span><span>(history_drop.history[</span><span>"val_accuracy"</span><span>])))</span></div> <br /> <div><span>model_reg&nbsp;=&nbsp;build_convolutional_network(number_of_hidden_layers&nbsp;=&nbsp;</span><span>1</span><span>,&nbsp;units&nbsp;=&nbsp;</span><span>100</span><span>,&nbsp;optimizer=</span><span>"adam"</span><span>,&nbsp;lr&nbsp;=&nbsp;</span><span>0.01</span><span>,&nbsp;regularization_kernel&nbsp;=&nbsp;</span><span>0.01</span><span>,&nbsp;regularization_bias&nbsp;=&nbsp;</span><span>0.01</span><span>)</span></div> <div><span>history_reg&nbsp;=&nbsp;model_reg.fit(x_fashion_train_conv,&nbsp;y_fashion_train_conv,&nbsp;batch_size=</span><span>128</span><span>,&nbsp;epochs=</span><span>20</span><span>,&nbsp;verbose=</span><span>0</span><span>,&nbsp;validation_data=(x_fashion_test_conv,&nbsp;y_fashion_test_conv))</span></div> <div><span>print</span><span>(</span><span>"Best&nbsp;validation&nbsp;accuracy&nbsp;for&nbsp;a&nbsp;convolutional&nbsp;neural&nbsp;network&nbsp;with&nbsp;regularization&nbsp;on&nbsp;weights&nbsp;and&nbsp;bias&nbsp;of&nbsp;0.01:&nbsp;"</span><span>&nbsp;+&nbsp;</span><span>str</span><span>(</span><span>max</span><span>(history_reg.history[</span><span>"val_accuracy"</span><span>])))</span></div> <div><span></span></div> <div> <div> <div><span>plot_history(history_batch,</span><span>"With&nbsp;batch&nbsp;normalization"</span><span>)</span></div> <div><span>plot_history(history_drop,</span><span>"With&nbsp;dropout&nbsp;of&nbsp;0.1"</span><span>)</span></div> <div><span>plot_history(history_reg,</span><span>"With&nbsp;kernel&nbsp;and&nbsp;bias&nbsp;regularization&nbsp;of&nbsp;0.01"</span><span>)</span></div> </div> </div></code><br/><br/>The comparative plots of the three different neural networks are as follows. We can see a comparison of the validation and testing accuracies and cross-entropies.<br/><br/><div style="text-align:center;"><img src="https://raw.githubusercontent.com/aiday-mar/Keras-Image-Classification/main/nn1.PNG" style="width:400px;"/><br/><br/><img src="https://raw.githubusercontent.com/aiday-mar/Keras-Image-Classification/main/nn2.PNG" style="width:400px;"/><br/><br/><img src="https://raw.githubusercontent.com/aiday-mar/Keras-Image-Classification/main/nn3.PNG" style="width:400px;"/></div><br/><br/>We then construct an optimal convolutional neural network and compare it with a basic neural network. <br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><span>model_optimal&nbsp;=&nbsp;build_convolutional_network(number_of_hidden_layers&nbsp;=&nbsp;</span><span>1</span><span>,&nbsp;units&nbsp;=&nbsp;</span><span>100</span><span>,&nbsp;optimizer=</span><span>"adam"</span><span>,&nbsp;batchNormalization=</span><span>True</span><span>,&nbsp;dropOut=</span><span>0.1</span><span>)</span></div> <div><span>history_optimal&nbsp;=&nbsp;model_optimal.fit(x_fashion_train_conv,&nbsp;y_fashion_train_conv,&nbsp;batch_size=</span><span>128</span><span>,&nbsp;epochs=</span><span>20</span><span>,&nbsp;verbose=</span><span>0</span><span>,&nbsp;validation_data=(x_fashion_test_conv,&nbsp;y_fashion_test_conv))</span><div> <div><span>fig_comparison&nbsp;=&nbsp;comparison_plot(history_6_1,&nbsp;history_optimal,&nbsp;</span><span>"Naive&nbsp;model"</span><span>,&nbsp;</span><span>"Optimized&nbsp;model"</span><span>,&nbsp;</span><span>"Effect&nbsp;of&nbsp;tricks&nbsp;and&nbsp;regularization"</span><span>)</span></div> <div><span>fig_comparison.set_size_inches(</span><span>20</span><span>,</span><span>8</span><span>)</span></div></div></div></code><br/><br/>The following plots are obtained.<br/><br/><img style="width:100%;" src="https://raw.githubusercontent.com/aiday-mar/Keras-Image-Classification/main/nn4.PNG"/>',
      icon: 'https://www.logiciels.pro/wp-content/uploads/2021/05/keras-avis-prix-alternatives-logiciel.webp',
    },
    {
      id: 4,
      title: 'Creating a travelling website using Angular',
      date: '13/09/2021',
      body: '<b> <a href="https://travel-angular-aiday.web.app/"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="15" height="15" viewBox="0 0 256 256" xml:space="preserve"> <desc>Created with Fabric.js 1.7.22</desc> <defs> </defs> <g transform="translate(128 128) scale(0.72 0.72)" style=""> <g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: none; fill-rule: nonzero; opacity: 1;" transform="translate(-175.05 -175.05000000000004) scale(3.89 3.89)" > <path d="M 58.506 39.939 c -2.231 0 -4.329 -0.869 -5.907 -2.447 c -3.257 -3.258 -3.257 -8.557 0 -11.815 v 0 c 3.259 -3.257 8.559 -3.255 11.814 0 c 1.578 1.577 2.448 3.675 2.448 5.907 s -0.869 4.33 -2.448 5.908 C 62.836 39.07 60.738 39.939 58.506 39.939 z M 55.428 28.507 c -1.697 1.698 -1.697 4.46 0 6.157 c 0.822 0.822 1.916 1.275 3.079 1.275 c 1.163 0 2.256 -0.453 3.079 -1.275 c 0.822 -0.822 1.276 -1.916 1.276 -3.079 c 0 -1.163 -0.453 -2.256 -1.276 -3.078 C 59.888 26.81 57.126 26.81 55.428 28.507 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" /> <path d="M 89.995 7.163 c 0.001 -0.083 0.001 -0.165 0.001 -0.248 c 0 -0.427 -0.003 -0.854 -0.012 -1.285 c -0.006 -0.267 -0.016 -0.534 -0.026 -0.802 c -0.011 -0.299 -0.02 -0.597 -0.036 -0.897 c -0.031 -0.602 -0.07 -1.207 -0.121 -1.814 c -0.081 -0.973 -0.854 -1.745 -1.827 -1.827 c -0.607 -0.051 -1.21 -0.089 -1.811 -0.121 c -0.305 -0.016 -0.607 -0.025 -0.909 -0.036 c -0.262 -0.009 -0.525 -0.02 -0.787 -0.025 c -0.437 -0.01 -0.871 -0.013 -1.304 -0.013 c -0.072 0 -0.145 0 -0.217 0.001 c -8.628 0.042 -16.548 2.16 -24.544 6.527 C 58.261 6.7 58.12 6.773 57.979 6.85 c -0.05 0.028 -0.099 0.052 -0.149 0.08 c -0.011 0.006 -0.02 0.016 -0.031 0.022 c -6.556 3.654 -13.101 8.811 -19.875 15.585 c -0.77 0.77 -1.523 1.55 -2.268 2.334 l -13.164 1.001 c -0.385 0.029 -0.753 0.169 -1.06 0.402 L 0.785 41.987 c -0.657 0.5 -0.94 1.352 -0.711 2.145 c 0.228 0.793 0.92 1.364 1.742 1.439 l 19.373 1.749 l 6.134 6.134 c -2.174 0.497 -4.389 1.715 -6.286 3.611 c -1.136 1.137 -2.048 2.411 -2.716 3.803 c -0.873 1.849 -2.79 6.61 -4.82 11.651 l -0.991 2.459 c -0.3 0.744 -0.127 1.595 0.441 2.162 c 0.382 0.383 0.894 0.586 1.415 0.586 c 0.251 0 0.505 -0.048 0.748 -0.146 l 2.547 -1.027 c 5 -2.014 9.723 -3.917 11.576 -4.79 c 1.38 -0.664 2.655 -1.576 3.79 -2.711 c 1.896 -1.896 3.113 -4.111 3.61 -6.285 l 5.952 5.952 l 1.749 19.372 c 0.074 0.822 0.646 1.514 1.439 1.742 c 0.183 0.053 0.369 0.078 0.553 0.078 c 0.614 0 1.207 -0.283 1.592 -0.789 l 15.711 -20.646 c 0.233 -0.307 0.373 -0.675 0.402 -1.06 l 0.971 -12.775 c 0.857 -0.811 1.707 -1.635 2.547 -2.475 c 6.779 -6.779 11.939 -13.327 15.594 -19.887 c 0.004 -0.007 0.01 -0.013 0.014 -0.02 c 0.018 -0.032 0.033 -0.063 0.051 -0.095 c 0.167 -0.301 0.326 -0.602 0.486 -0.904 C 87.906 23.416 89.95 15.628 89.995 7.163 z M 85.931 4.161 c 0.442 8.455 -1.171 16.115 -5.014 23.796 L 62.136 9.176 C 69.815 5.332 77.471 3.718 85.931 4.161 z M 23.384 29.817 l 8.371 -0.636 c -1.415 1.633 -2.771 3.282 -4.06 4.942 c -0.007 0.009 -0.016 0.015 -0.023 0.024 c -0.107 0.138 -0.206 0.276 -0.312 0.414 c -0.541 0.704 -1.075 1.408 -1.591 2.114 c -0.144 0.196 -0.278 0.391 -0.42 0.587 c -0.488 0.678 -0.973 1.355 -1.437 2.033 c -0.236 0.344 -0.455 0.685 -0.683 1.027 c -0.353 0.53 -0.712 1.059 -1.049 1.588 c -0.3 0.47 -0.578 0.935 -0.864 1.403 L 7.308 42.05 L 23.384 29.817 z M 51.111 61.049 c -0.687 0.503 -1.371 0.991 -2.054 1.465 c -0.411 0.285 -0.822 0.569 -1.233 0.845 c -0.293 0.197 -0.585 0.391 -0.877 0.582 c -0.709 0.464 -1.417 0.922 -2.124 1.356 L 34.811 55.284 c -0.001 -0.001 -0.001 -0.001 -0.002 -0.002 s -0.001 -0.001 -0.002 -0.002 L 24.795 45.268 c 0.025 -0.04 0.052 -0.081 0.077 -0.122 c 0.407 -0.659 0.832 -1.319 1.265 -1.98 c 0.201 -0.306 0.405 -0.613 0.612 -0.921 c 0.263 -0.392 0.535 -0.785 0.807 -1.177 c 0.486 -0.7 0.986 -1.401 1.501 -2.105 c 0.135 -0.184 0.268 -0.369 0.405 -0.553 l 22.22 22.221 C 51.492 60.772 51.301 60.909 51.111 61.049 z M 30.199 66.225 c -0.816 0.816 -1.722 1.466 -2.683 1.927 c -1.512 0.714 -5.425 2.304 -9.539 3.962 c 1.66 -4.119 3.247 -8.024 3.955 -9.526 c 0.468 -0.973 1.119 -1.879 1.935 -2.696 c 1.728 -1.729 3.886 -2.682 5.661 -2.682 c 0.978 0 1.84 0.29 2.449 0.897 l 0.006 0.006 C 33.695 59.832 32.879 63.545 30.199 66.225 z M 60.092 66.525 L 47.858 82.6 L 46.62 68.873 c 0.521 -0.318 1.041 -0.629 1.566 -0.965 c 0.498 -0.318 0.997 -0.656 1.495 -0.988 c 0.375 -0.25 0.748 -0.49 1.124 -0.748 c 0.652 -0.446 1.303 -0.913 1.955 -1.382 c 0.223 -0.161 0.446 -0.315 0.67 -0.479 c 0.685 -0.5 1.367 -1.019 2.05 -1.542 c 0.155 -0.119 0.31 -0.23 0.465 -0.35 c 0.01 -0.008 0.017 -0.018 0.027 -0.026 c 1.588 -1.232 3.165 -2.527 4.729 -3.875 L 60.092 66.525 z M 64.725 49.339 c -3.181 3.181 -6.49 6.147 -9.844 8.834 L 31.919 35.21 c 2.687 -3.354 5.653 -6.663 8.834 -9.844 c 6.432 -6.432 12.306 -10.995 17.707 -14.209 l 20.474 20.474 C 75.721 37.033 71.158 42.907 64.725 49.339 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" /> </g> </g> </svg> &nbsp; Live link: https://travel-angular-aiday.web.app/</a></b><br/><b> <a href="https://github.com/aiday-mar/Angular-travel-app"><svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg> &nbsp; GitHub: https://github.com/aiday-mar/Angular-travel-app </a> </b> <br/><br/>See below for the description of the key features of the project.<br/><br/><br/><img src="https://raw.githubusercontent.com/aiday-mar/Angular-travel-app/master/Angular_Picture_1.PNG"/><br/><br/><img src="https://raw.githubusercontent.com/aiday-mar/Angular-travel-app/master/Angular_Picture_2.PNG"/><br/><br/><b>Customer support chat window</b><br/><br/>The chat window is made using the Kendo library. A div was appended to the top of the window, which can be used to close the window.<br/><br/><b>Booking interface</b><br/><br/>There is a booking page, where you can search for a flight (the results are filtered on typing). It is also possible to select the date range of the flight using the Material UI date calendar picker. You can select the flights of interest by clicking on the shopping cart icon. The select flights will appear in the checkout. In order to do this, I implemented a booking service as follows:<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"> <div><span>import</span><span>&nbsp;{&nbsp;</span><span>Injectable</span><span>&nbsp;}&nbsp;</span><span>from</span><span>&nbsp;</span><span>"@angular/core"</span><span>;</span></div> <br /> <div><span>interface</span><span>&nbsp;</span><span>Flight</span><span>&nbsp;{</span></div> <div><span>&nbsp;&nbsp;</span><span>id</span><span>:&nbsp;</span><span>String</span><span>;</span></div> <div><span>&nbsp;&nbsp;</span><span>from</span><span>:&nbsp;</span><span>String</span><span>;</span></div> <div><span>&nbsp;&nbsp;</span><span>to</span><span>:&nbsp;</span><span>String</span><span>;</span></div> <div><span>&nbsp;&nbsp;</span><span>departure</span><span>:&nbsp;</span><span>String</span><span>;</span></div> <div><span>&nbsp;&nbsp;</span><span>arrival</span><span>:&nbsp;</span><span>String</span><span>;</span></div> <div><span>&nbsp;&nbsp;</span><span>price</span><span>:&nbsp;</span><span>String</span><span>;</span></div> <div><span>}</span></div> <br /> <div><span>@</span><span>Injectable</span><span>()</span></div> <div><span>export</span><span>&nbsp;</span><span>class</span><span>&nbsp;</span><span>BookingService</span><span>&nbsp;{</span></div> <div><span>&nbsp;&nbsp;</span><span>flightsToPay</span><span>:&nbsp;</span><span>Flight</span><span>[]&nbsp;=&nbsp;[];</span></div> <div><span>&nbsp;&nbsp;</span><span>flightIdsToPay</span><span>:&nbsp;</span><span>String</span><span>[]&nbsp;=&nbsp;[];</span></div> <div><span>&nbsp;&nbsp;</span><span>totalFlights</span><span>:&nbsp;</span><span>number</span><span>&nbsp;=&nbsp;</span><span>0</span><span>;</span></div> <br /> <div><span>&nbsp;&nbsp;</span><span>constructor</span><span>()&nbsp;{}</span></div> <div><span>}</span></div> </code> <br/><br/>Then I use the booking service as follows in the booking component.<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><span>export</span><span>&nbsp;</span><span>class</span><span>&nbsp;</span><span>BookComponent</span><span>&nbsp;</span><span>implements</span><span>&nbsp;</span><span>OnInit</span><span>&nbsp;{</span></div><div><span>&nbsp;&nbsp;</span><span>flights</span><span>:&nbsp;</span><span>Flight</span><span>[]&nbsp;=&nbsp;</span><span>flightsData</span><span>;</span></div><p></p><div><span>&nbsp;&nbsp;</span><span>constructor</span><span>(</span><span>private</span><span>&nbsp;</span><span>bookingService</span><span>:&nbsp;</span><span>BookingService</span><span>)&nbsp;{}</span></div><p></p><div><span>&nbsp;&nbsp;</span><span>saveBooking</span><span>(</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>id</span><span>:&nbsp;</span><span>string</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>from</span><span>:&nbsp;</span><span>string</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>to</span><span>:&nbsp;</span><span>string</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>departure</span><span>:&nbsp;</span><span>string</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>arrival</span><span>:&nbsp;</span><span>string</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>price</span><span>:&nbsp;</span><span>string</span></div><div><span>&nbsp;&nbsp;)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>const</span><span>&nbsp;</span><span>toSave</span><span>:&nbsp;</span><span>Flight</span><span>&nbsp;=&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>id:</span><span>&nbsp;</span><span>id</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>from:</span><span>&nbsp;</span><span>from</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>to:</span><span>&nbsp;</span><span>to</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>departure:</span><span>&nbsp;</span><span>departure</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>arrival:</span><span>&nbsp;</span><span>arrival</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>price:</span><span>&nbsp;</span><span>price</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;};</span></div><p></p><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>&nbsp;(</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>flightIdsToPay</span><span>.</span><span>indexOf</span><span>(</span><span>id</span><span>)&nbsp;==&nbsp;-</span><span>1</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>flightsToPay</span><span>.</span><span>push</span><span>(</span><span>toSave</span><span>);</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>flightIdsToPay</span><span>&nbsp;=&nbsp;</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>flightsToPay</span><span>.</span><span>map</span><span>(</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(</span><span>entry</span><span>)&nbsp;</span><span>=&gt;</span><span>&nbsp;</span><span>entry</span><span>.</span><span>id</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>totalFlights</span><span>&nbsp;=</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>totalFlights</span><span>&nbsp;+&nbsp;</span><span>Number</span><span>(</span><span>price</span><span>);</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span><span>else</span><span>&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>flightsToPay</span><span>&nbsp;=</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>flightsToPay</span><span>.</span><span>filter</span><span>((</span><span>entry</span><span>)&nbsp;</span><span>=&gt;</span><span>&nbsp;</span><span>entry</span><span>.</span><span>id</span><span>&nbsp;!==&nbsp;</span><span>id</span><span>);</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>flightIdsToPay</span><span>&nbsp;=&nbsp;</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>flightsToPay</span><span>.</span><span>map</span><span>(</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(</span><span>entry</span><span>)&nbsp;</span><span>=&gt;</span><span>&nbsp;</span><span>entry</span><span>.</span><span>id</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>totalFlights</span><span>&nbsp;=</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>totalFlights</span><span>&nbsp;-&nbsp;</span><span>Number</span><span>(</span><span>price</span><span>);</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span>&nbsp;&nbsp;}</span></div><p></p><div><span>&nbsp;&nbsp;</span><span>getColor</span><span>(</span><span>id</span><span>:&nbsp;</span><span>string</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>&nbsp;(</span><span>this</span><span>.</span><span>bookingService</span><span>.</span><span>flightIdsToPay</span><span>.</span><span>indexOf</span><span>(</span><span>id</span><span>)&nbsp;==&nbsp;-</span><span>1</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span>&nbsp;</span><span>"grey"</span><span>;</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span><span>else</span><span>&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span>&nbsp;</span><span>"green"</span><span>;</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span>&nbsp;&nbsp;}</span></div><p></p><div><span>&nbsp;&nbsp;</span><span>onChangeFrom</span><span>(</span><span>event</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>flights</span><span>&nbsp;=&nbsp;</span><span>flightsData</span><span>.</span><span>filter</span><span>(</span><span>function</span><span>&nbsp;(</span><span>entry</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span>&nbsp;</span><span>entry</span><span>.</span><span>from</span><span>.</span><span>toLowerCase</span><span>().</span><span>includes</span><span>(</span><span>event</span><span>.</span><span>toLowerCase</span><span>());</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;});</span></div><div><span>&nbsp;&nbsp;}</span></div><p></p><div><span>&nbsp;&nbsp;</span><span>onChangeTo</span><span>(</span><span>event</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>flights</span><span>&nbsp;=&nbsp;</span><span>flightsData</span><span>.</span><span>filter</span><span>(</span><span>function</span><span>&nbsp;(</span><span>entry</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span>&nbsp;</span><span>entry</span><span>.</span><span>to</span><span>.</span><span>toLowerCase</span><span>().</span><span>includes</span><span>(</span><span>event</span><span>.</span><span>toLowerCase</span><span>());</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;});</span></div><div><span>&nbsp;&nbsp;}</span></div><p></p><div><span>&nbsp;&nbsp;</span><span>onClickSubmit</span><span>(</span><span>data</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>flights</span><span>&nbsp;=&nbsp;</span><span>flightsData</span><span>.</span><span>filter</span><span>(</span><span>function</span><span>&nbsp;(</span><span>entry</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span>&nbsp;</span><span>entry</span><span>.</span><span>from</span><span>&nbsp;==&nbsp;</span><span>data</span><span>.</span><span>from</span><span>&nbsp;&amp;&amp;&nbsp;</span><span>entry</span><span>.</span><span>to</span><span>&nbsp;==&nbsp;</span><span>data</span><span>.</span><span>to</span><span>;</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;});</span></div><div><span>&nbsp;&nbsp;}</span></div><p></p><div><span>&nbsp;&nbsp;</span><span>ngOnInit</span><span>()&nbsp;{} <br/>}</span></div></code><br/><br/><b>Payment with stripe</b><br/><br/>Once the flights are booked it is possible to pay for them. The payment component is implemented using the Stripe library.<br/><br/><code style="overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;"><div ><div><span>export</span><span>&nbsp;</span><span>class</span><span>&nbsp;</span><span>PaymentComponent</span><span>&nbsp;</span><span>implements</span><span>&nbsp;</span><span>OnInit</span><span>&nbsp;{</span></div> <div><span>&nbsp;&nbsp;</span><span>flightsToPay</span><span>:&nbsp;</span><span>Flight</span><span>[];</span></div> <div><span>&nbsp;&nbsp;</span><span>paymentHandler</span><span>:</span><span>any</span><span>&nbsp;=&nbsp;</span><span>null</span><span>;</span></div> <br /> <div><span>&nbsp;&nbsp;</span><span>constructor</span><span>(</span><span>private</span><span>&nbsp;</span><span>bookingService</span><span>:&nbsp;</span><span>BookingService</span><span>)&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>flightsToPay</span><span>&nbsp;=&nbsp;</span><span>bookingService</span><span>.</span><span>flightsToPay</span><span>;</span></div> <div><span>&nbsp;&nbsp;}</span></div> <br /> <div><span>&nbsp;&nbsp;</span><span>ngOnInit</span><span>()&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>invokeStripe</span><span>();</span></div> <div><span>&nbsp;&nbsp;}</span></div> <div><span>&nbsp;&nbsp;</span></div> <div><span>&nbsp;&nbsp;</span><span>makePayment</span><span>(</span><span>amount</span><span>)&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>const</span><span>&nbsp;</span><span>paymentHandler</span><span>&nbsp;=&nbsp;(&lt;</span><span>any</span><span>&gt;</span><span>window</span><span>).</span><span>StripeCheckout</span><span>.</span><span>configure</span><span>({</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>key:</span><span>&nbsp;</span><span>"PK"</span><span>,</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>locale:</span><span>&nbsp;</span><span>"auto"</span><span>,</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>token</span><span>:</span><span>&nbsp;</span><span>function</span><span>&nbsp;(</span><span>stripeToken</span><span>:&nbsp;</span><span>any</span><span>)&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>console</span><span>.</span><span>log</span><span>(</span><span>stripeToken</span><span>)</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>alert</span><span>(</span><span>"Stripe&nbsp;token&nbsp;generated!"</span><span>);</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;});</span></div> <div><span>&nbsp;&nbsp;</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>paymentHandler</span><span>.</span><span>open</span><span>({</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>name:</span><span>&nbsp;</span><span>"Payment"</span><span>,</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>amount:</span><span>&nbsp;</span><span>amount</span><span>&nbsp;*&nbsp;</span><span>100</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;});</span></div> <div><span>&nbsp;&nbsp;}</span></div> <div><span>&nbsp;&nbsp;</span></div> <div><span>&nbsp;&nbsp;</span><span>invokeStripe</span><span>()&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>(!</span><span>window</span><span>.</span><span>document</span><span>.</span><span>getElementById</span><span>(</span><span>"stripe-script"</span><span>))&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>const</span><span>&nbsp;</span><span>script</span><span>&nbsp;=&nbsp;</span><span>window</span><span>.</span><span>document</span><span>.</span><span>createElement</span><span>(</span><span>"script"</span><span>);</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>script</span><span>.</span><span>id</span><span>&nbsp;=&nbsp;</span><span>"stripe-script"</span><span>;</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>script</span><span>.</span><span>type</span><span>&nbsp;=&nbsp;</span><span>"text/javascript"</span><span>;</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>script</span><span>.</span><span>src</span><span>&nbsp;=&nbsp;</span><span>"https://checkout.stripe.com/checkout.js"</span><span>;</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>script</span><span>.</span><span>onload</span><span>&nbsp;=&nbsp;()&nbsp;</span><span>=&gt;</span><span>&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>paymentHandler</span><span>&nbsp;=&nbsp;(&lt;</span><span>any</span><span>&gt;</span><span>window</span><span>).</span><span>StripeCheckout</span><span>.</span><span>configure</span><span>({</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>key:</span><span>&nbsp;</span><span>"PK"</span><span>,</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>locale:</span><span>&nbsp;</span><span>"auto"</span><span>,</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>token</span><span>:</span><span>&nbsp;</span><span>function</span><span>&nbsp;(</span><span>stripeToken</span><span>:&nbsp;</span><span>any</span><span>)&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>console</span><span>.</span><span>log</span><span>(</span><span>stripeToken</span><span>)</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>alert</span><span>(</span><span>"Payment&nbsp;has&nbsp;been&nbsp;successfull!"</span><span>);</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>window</span><span>.</span><span>document</span><span>.</span><span>body</span><span>.</span><span>appendChild</span><span>(</span><span>script</span><span>);</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div> <div><span>&nbsp;&nbsp;}</span></div> <div><span>}</span></div></div></code>',
      icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/1200px-Angular_full_color_logo.svg.png',
    },
    {
      id: 5,
      title:
        'Using GraphQL, Apollo and Websocket.IO to create a studying application',
      date: '13/09/2021',
      body: 'Talk about the GraphQL project',
      icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/GraphQL_Logo.svg/1200px-GraphQL_Logo.svg.png',
    },
    {
      id: 6,
      title: 'Coding Portfolio built using React',
      date: '16/11/2021',
      body: "<b> <a href='https://github.com/aiday-mar/React-personal-portfolio'><svg xmlns='http://www.w3.org/2000/svg' width='15' height='15' viewBox='0 0 24 24'><path d='M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z'/></svg> &nbsp; GitHub: https://github.com/aiday-mar/React-personal-portfolio </a> </b> <br/><br/>This portfolio website is built using React. This website has several key features. <br/><br/><br/> <b> <div id='routing'> Routing </div> </b> <br/><br/> The routing in this portfolio is made with the react-router-dom library, specifically using the Switch and Route components. In order to be able to access the posts on this site, I parse the request URL by fetching the article corresponding to the ID in the URL, as follows : <br/><br/> <code style='overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;'> &ltSwitch&gt <br/>&nbsp;&nbsp;&ltRoute path='/post/:id' component={Post}/&gt <br/>&lt/Switch&gt </code> <br/><br/> <b> <div id='navigation'> Navigation Bar </div></b> <br/><br/> The navigation bar is configured to be sticky, so that it sticks to the top of the navigation window. <br/><br/><br/> <b><div id='intro'>Introductory CSS animation </div></b><br/><br/> The CSS animations is displayed only once per session, and only when one accesses the main page of the website. That is if a person access a specific article, even on a new session, the CSS animation will not be displayed. The constructor in the routing component is as follows : <br/><br/> <code style='overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;'><div> <div><span>constructor</span><span>()&nbsp;{</span></div> <div><span>&nbsp; &nbsp; super</span><span>();</span></div> <br /> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>&nbsp;(</span><span>window</span><span>.</span><span>location</span><span>.</span><span>pathname</span><span>&nbsp;===&nbsp;</span><span>'/'</span><span>)&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>state</span><span>&nbsp;=&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>animate:</span><span>&nbsp;</span><span>true</span><span>,</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>showIntro:</span><span>&nbsp;</span><span>true</span><span>,</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span><span>else</span><span>&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>state</span><span>&nbsp;=&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>animate:</span><span>&nbsp;</span><span>false</span><span>,</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>showIntro:</span><span>&nbsp;</span><span>false</span><span>,</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>myRef</span><span>&nbsp;=&nbsp;</span><span>React</span><span>.</span><span>createRef</span><span>();</span></div> <div><span>}</span></div> </div></code> <br/> <br/>In the render method we have: <br/> <br/> <code style='overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;'> <div><span>render</span><span>()&nbsp;{</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span>&nbsp;(</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;</span><span>div</span><span>&nbsp;</span><span>className</span><span>=</span><span>'Body'</span><span>&gt;</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>{</span><span>this</span><span>.</span><span>state</span><span>.</span><span>animate</span><span>&nbsp;&amp;&amp;&nbsp;</span><span>this</span><span>.</span><span>state</span><span>.</span><span>showIntro</span><span>&nbsp;?&nbsp;</span><span>&lt;</span><span>Intro</span><span>&nbsp;</span><span>/&gt;</span><span>&nbsp;:&nbsp;</span><span>null</span><span>}</span></div> <div><span>&nbsp; &nbsp; &nbsp; &nbsp; ...</span><span></span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;/</span><span>div</span><span>&gt;</span></div> <div><span>&nbsp;&nbsp;&nbsp;&nbsp;);</span></div> <div><span>}</span></div></code> </br></br> And we have the following ComponentDidMount method: <br/> <br/> <code style='overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;'><div><span>componentDidMount</span><span>()&nbsp;{</span></div><div></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>const</span><span>&nbsp;</span><span>el</span><span>&nbsp;=&nbsp;</span><span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'.loader-container'</span><span>);</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>&nbsp;(</span><span>el</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>el</span><span>.</span><span>remove</span><span>();&nbsp;</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>setState</span><span>({&nbsp;</span><span>loading:</span><span>&nbsp;</span><span>false</span><span>&nbsp;});&nbsp;</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span></span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>&nbsp;(</span><span>window</span><span>.</span><span>location</span><span>.</span><span>pathname</span><span>&nbsp;===&nbsp;</span><span>'/'</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>&nbsp;(</span><span>window</span><span>.</span><span>sessionStorage</span><span>.</span><span>getItem</span><span>(</span><span>'firstLoadDone'</span><span>)&nbsp;===&nbsp;</span><span>null</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>setState</span><span>({</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>animate:</span><span>&nbsp;</span><span>true</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>window</span><span>.</span><span>sessionStorage</span><span>.</span><span>setItem</span><span>(</span><span>'firstLoadDone'</span><span>,&nbsp;</span><span>1</span><span>);</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>document</span><span>.</span><span>body</span><span>.</span><span>style</span><span>.</span><span>overflow</span><span>&nbsp;=&nbsp;</span><span>'hidden'</span><span>;</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span><span>else</span><span>&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>setState</span><span>({</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>animate:</span><span>&nbsp;</span><span>false</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span></span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>&nbsp;(</span><span>this</span><span>.</span><span>state</span><span>.</span><span>animate</span><span>&nbsp;==&nbsp;</span><span>true</span><span>)&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>setTimeout</span><span>(()&nbsp;</span><span>=&gt;</span><span>&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>myRef</span><span>.</span><span>current</span><span>.</span><span>scrollIntoView</span><span>({</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>behavior:</span><span>&nbsp;</span><span>'smooth'</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>block:</span><span>&nbsp;</span><span>'start'</span><span>,</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>setTimeout</span><span>(()&nbsp;</span><span>=&gt;</span><span>&nbsp;{</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>document</span><span>.</span><span>body</span><span>.</span><span>style</span><span>.</span><span>overflow</span><span>&nbsp;=&nbsp;</span><span>'unset'</span><span>;</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>state</span><span>.</span><span>showIntro</span><span>&nbsp;=&nbsp;</span><span>false</span><span>;</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>this</span><span>.</span><span>forceUpdate</span><span>();</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;</span><span>1000</span><span>);</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;</span><span>3000</span><span>);</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span>}</span></div></code> <br/> <br/><b><div id='material'>Material UI</div></b> <br/> <br/> The cards visible on the home page are made using the Material UI library. The cards are arranged inside of a box. <br/><br/><br/><div id='slideshow'><div><b>Slideshow</b></div><br/><br/>There is a slideshow on the main page where I introduce myself. The code for that is: <br/><br/><div style='overflow-x:scroll;white-space: nowrap;padding:20px;background-color:#f7f7f7;'><div id='slideshow'><code><span>export</span><span>&nbsp;</span><span>default</span><span>&nbsp;</span><span>function</span><span>&nbsp;</span><span>Slideshow</span><span>()&nbsp;{</span></code></div> <div></div> <div><code><span>&nbsp;&nbsp;</span><span>const</span><span>&nbsp;[</span><span>index</span><span>,&nbsp;</span><span>setIndex</span><span>]&nbsp;=&nbsp;</span><span>React</span><span>.</span><span>useState</span><span>(</span><span>0</span><span>);</span></code></div> <div><code><span>&nbsp;&nbsp;</span><span>const</span><span>&nbsp;</span><span>timeoutRef</span><span>&nbsp;=&nbsp;</span><span>React</span><span>.</span><span>useRef</span><span>(</span><span>null</span><span>);</span></code></div> <div><code><span></span></code></div> <div><code><span>&nbsp;&nbsp;</span><span>function</span><span>&nbsp;</span><span>resetTimeout</span><span>()&nbsp;{</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span>&nbsp;(</span><span>timeoutRef</span><span>.</span><span>current</span><span>)&nbsp;{</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>clearTimeout</span><span>(</span><span>timeoutRef</span><span>.</span><span>current</span><span>);</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></code></div> <div><code><span>&nbsp;&nbsp;}</span></code></div> <div><code><span></span></code></div> <div><code><span>&nbsp;&nbsp;</span><span>return</span><span>&nbsp;(</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;</span><span>div</span><span>&nbsp;</span><span>className</span><span>=</span><span>'slideshow'</span><span>&nbsp;</span><span>style</span><span>=</span><span>{</span><span>{&nbsp;</span><span>fontFamily:</span><span>&nbsp;</span><span>'Arial&nbsp;Narrow'</span><span>&nbsp;}</span><span>}</span><span>&gt;</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;</span><span>div</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>className</span><span>=</span><span>'slideshowSlider'</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>style</span><span>=</span><span>{</span><span>{&nbsp;</span><span>transform:</span><span>&nbsp;</span><span>`translate3d(</span><span>${</span><span>-</span><span>index</span><span>&nbsp;*&nbsp;</span><span>100</span><span>}</span><span>%,&nbsp;0,&nbsp;0)`</span><span>&nbsp;}</span><span>}</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&gt;</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>{</span><span>colors</span><span>.</span><span>map</span><span>((</span><span>backgroundColor</span><span>,&nbsp;</span><span>index</span><span>)&nbsp;</span><span>=&gt;</span><span>&nbsp;(</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;</span><span>div</span><span>&nbsp;</span><span>className</span><span>=</span><span>'slide'</span><span>&nbsp;</span><span>key</span><span>=</span><span>{</span><span>index</span><span>}</span><span>&gt;</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;</span><span>div</span><span>&nbsp;</span><span>className</span><span>=</span><span>'textInSlide'</span><span>&nbsp;</span><span>style</span><span>=</span><span>{</span><span>{&nbsp;</span><span>fontSize:</span><span>&nbsp;</span><span>17</span><span>&nbsp;}</span><span>}</span><span>&gt;</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>{</span><span>text</span><span>[</span><span>index</span><span>]</span><span>}</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;/</span><span>div</span><span>&gt;</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;/</span><span>div</span><span>&gt;</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))</span><span>}</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;/</span><span>div</span><span>&gt;</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;</span><span>div</span><span>&nbsp;</span><span>className</span><span>=</span><span>'slideshowDots'</span><span>&gt;</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>{</span><span>colors</span><span>.</span><span>map</span><span>((</span><span>_</span><span>,&nbsp;</span><span>idx</span><span>)&nbsp;</span><span>=&gt;</span><span>&nbsp;(</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;</span><span>div</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>key</span><span>=</span><span>{</span><span>idx</span><span>}</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>className</span><span>=</span><span>{</span><span>`slideshowDot</span><span>${</span><span>index</span><span>&nbsp;===&nbsp;</span><span>idx</span><span>&nbsp;?&nbsp;</span><span>'&nbsp;active'</span><span>&nbsp;:&nbsp;</span><span>''</span><span>}</span><span>`</span><span>}</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>onClick</span><span>=</span><span>{</span><span>()&nbsp;</span><span>=&gt;</span><span>&nbsp;{</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>setIndex</span><span>(</span><span>idx</span><span>);</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><span>}</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&gt;&lt;/</span><span>div</span><span>&gt;</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))</span><span>}</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;/</span><span>div</span><span>&gt;</span></code></div> <div><code><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>&lt;/</span><span>div</span><span>&gt;</span></code></div> <div><code><span>&nbsp;&nbsp;);</span></code></div> <div><code><span>}</span></code></div></div>",
      icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/1200px-React-icon.svg.png',
    },
    {
      id: 7,
      title: 'Building an Android blogging app using Java',
      date: '16/11/2021',
      body: 'Describe the project',
      icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Android_robot.svg/1200px-Android_robot.svg.png',
    },
    {
      id: 8,
      title: 'Building an ASP .NET website',
      date: '16/11/2021',
      body: 'Describe the project',
      icon: 'https://www.softfluent.fr/wp-content/uploads/2019/10/net-MVC.png',
    },
    {
      id: 9,
      title: 'Using C++ to find eigenvalues and eigenvectors',
      date: '16/11/2021',
      body: 'Describe the project',
      icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/ISO_C%2B%2B_Logo.svg/1200px-ISO_C%2B%2B_Logo.svg.png',
    },
  ],
};
